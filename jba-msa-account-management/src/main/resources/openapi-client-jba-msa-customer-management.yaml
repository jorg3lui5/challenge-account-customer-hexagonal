openapi: 3.0.0
info:
  title: Api Customer management
  description: |
    Api for customer management
  contact:
    name: Jorge Barreto
    email: jorg3lui5@hotmail.com
  license:
    name: Apache 2.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1/customer-management
tags:
  - name: Customer
    description: Customer Controller
paths:
  /customers/{customerId}:
    get:
      tags:
        - Customer
      summary: Retrieve customer by id
      description: |
        ### Detalle:
        Retrieve customer by id
         | Expected Result  | Path Parameter | Query Parameter                 |
        | ---------------- | ------------   | -----------------------------------|
        | Retrieve customer by id| customerId | - |
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            format: int64
            example: 1234423
      responses:
        "200":
          description: Customer retrieved successfully
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetCustomerByIdResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
    delete:
      tags:
        - Customer
      summary: Delete Customer by Id
      description: |
        ### Detalle:
        Delete Customer by Id
         | Expected Result  | Path Parameter | Query Parameter                 |
        | ---------------- | ------------   | -----------------------------------|
        | elimina un cliente por id| clientId | - |
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: integer
            format: int64
            example: 1234423
      responses:
        "200":
          description: |-
            <b>`Ok`</b><br><br>
            Customer deleted Successfully.
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
  /customers/identification:
    get:
      tags:
        - Customer
      summary: Retrieve customer by filter
      description: |
        ### Detalle:
        Retrieve customer by id
         | Expected Result  | Path Parameter | Query Parameter                 |
        | ---------------- | ------------   | -----------------------------------|
        | Retrieve customer by filter| - | identification |
      operationId: GetCustomerByFilter
      parameters:
        - name: identification
          in: query
          description: Customer Identification
          required: true
          schema:
            type: string
            maxLength: 13
            minLength: 10
            pattern: "^[0-9]+$"
            example: 0106279855
      responses:
        "200":
          description: Customer retrieved successfully
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetCustomerByFilterResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
  /customers:
    get:
      tags:
        - Customer
      summary: Retrieve customer list
      description: >+
        ### Detalles:
        Retrieve customer list.<br>
      operationId: getCustomers
      responses:
        "200":
          description: Customer retrieved successfully
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/GetCustomersResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
    post:
      tags:
        - Customer
      summary: Save customer
      description: Save data customer
      operationId: PostCustomer
      requestBody:
        description: Customer to save
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCustomerRequest'
      responses:
        "201":
          description: |-
            <b>`Created`</b><br><br>
            Customer saved successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
    put:
      tags:
        - Customer
      summary: Update all data of customer
      description: Update all data of customer
      operationId: PutCustomer
      requestBody:
        description: Customer to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCustomerRequest'
      responses:
        "200":
          description: |-
            <b>`Ok`</b><br><br>
            Customer update successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
    patch:
      tags:
        - Customer
      summary: Update one or many data of customer
      description: Update one or many data of customer
      operationId: PatchCustomer
      requestBody:
        description: Update one or many data of customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCustomerRequest'
      responses:
        "200":
          description: |-
            <b>`Ok`</b><br><br>
            Customer update successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/Conflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "504":
          $ref: '#/components/responses/GatewayTimeout'
components:
  schemas:
    customerId:
      type: integer
      format: int64
      example: 123456789
    identification:
      type: string
      example: "0106279842"
      maxLength: 13
      minLength: 10
      pattern: "^[0-9]+$"
    name:
      type: string
      example: "Juan Perez"
      maxLength: 50
      minLength: 1
      pattern: "^[a-zA-Z\\sñÑÁáÉéÍíÓóÚú]+$"
    gender:
      enum:
        - Masculino
        - Femenino
      example: "Masculino"
    age:
      type: integer
      format: int32
      minimum: 0
      maximum: 100
      example: 20
    address:
      type: string
      example: "Av. Americas"
      pattern: "^[a-zA-Z0-9\\sñÑÁáÉéÍíÓóÚú.,\"&():_/-]+$"
      maxLength: 100
      minLength: 1
    phone:
      type: string
      example: "5553345564"
      maxLength: 10
      minLength: 1
      pattern: "^[0-9]+$"
    password:
      type: string
      example: "********"
      maxLength: 30
      minLength: 1
    status:
      type: boolean
      example: True
    GetCustomersResponse:
      type: array
      title: GetCustomersResponse
      items:
        $ref: '#/components/schemas/GetCustomerResponse'
    GetCustomerByIdResponse:
      $ref: '#/components/schemas/GetCustomerResponse'
    GetCustomerByFilterResponse:
      $ref: '#/components/schemas/GetCustomerResponse'
    GetCustomerResponse:
      required:
        - customerId
        - identification
        - name
        - gender
        - age
        - address
        - phone
        - status
      type: object
      properties:
        customerId:
          $ref: '#/components/schemas/customerId'
        identification:
          $ref: '#/components/schemas/identification'
        name:
          $ref: '#/components/schemas/name'
        gender:
          $ref: '#/components/schemas/gender'
        age:
          $ref: '#/components/schemas/age'
        address:
          $ref: '#/components/schemas/address'
        phone:
          $ref: '#/components/schemas/phone'
        status:
          $ref: '#/components/schemas/status'
    PostCustomerRequest:
      required:
        - identification
        - name
        - gender
        - age
        - address
        - phone
        - password
      type: object
      properties:
        identification:
          $ref: '#/components/schemas/identification'
        name:
          $ref: '#/components/schemas/name'
        gender:
          $ref: '#/components/schemas/gender'
        age:
          $ref: '#/components/schemas/age'
        address:
          $ref: '#/components/schemas/address'
        phone:
          $ref: '#/components/schemas/phone'
        password:
          $ref: '#/components/schemas/password'
    PutCustomerRequest:
      required:
        - customerId
        - identification
        - name
        - gender
        - age
        - address
        - phone
        - password
        - estado
      type: object
      properties:
        customerId:
          $ref: '#/components/schemas/customerId'
        identification:
          $ref: '#/components/schemas/identification'
        name:
          $ref: '#/components/schemas/name'
        gender:
          $ref: '#/components/schemas/gender'
        age:
          $ref: '#/components/schemas/age'
        address:
          $ref: '#/components/schemas/address'
        phone:
          $ref: '#/components/schemas/phone'
        password:
          $ref: '#/components/schemas/password'
        status:
          $ref: '#/components/schemas/status'
    PatchCustomerRequest:
      required:
        - customerId
      type: object
      properties:
        customerId:
          $ref: '#/components/schemas/customerId'
        identification:
          $ref: '#/components/schemas/identification'
        name:
          $ref: '#/components/schemas/name'
        gender:
          $ref: '#/components/schemas/gender'
        age:
          $ref: '#/components/schemas/age'
        address:
          $ref: '#/components/schemas/address'
        phone:
          $ref: '#/components/schemas/phone'
        password:
          $ref: '#/components/schemas/password'
        status:
          $ref: '#/components/schemas/status'
    ErrorModel:
      type: object
      properties:
        title:
          maximum: 50
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Mensaje de error técnico.
            <br>
            <sup><i>(EN)</i></sup> Technical error message
          example: Internal Server.
        detail:
          maximum: 50
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Mensaje a presentar al cliente, o error a detalle del evento
            <br>
            <sup><i>(EN)</i></sup> Message to display to the client, or error detailing the event
          example: "Se produjo un error interno, lo estamos revisando."
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorList'
        instance:
          maximum: 50
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Código de catálogo de errores o Una referencia URI que identifique específicamente la aparición del problema.
            <br>
            <sup><i>(EN)</i></sup> Bug Catalog Code o A URI reference that specifically identifies the occurrence of the problem.
          example: "0188"
        type:
          maximum: 100
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Una referencia URI que identifica el tipo de problema.
            <br>
            <sup><i>(EN)</i></sup> A URI reference that identifies the type of problem.
          example: /v1/name/pathSuffix
        resource:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Recurso, Clase u objeto donde se genero el error.
            <br>
            <sup><i>(EN)</i></sup> Resource, Class or object where the error was generated.
          example: UMPClientes0020/ConsultaInformacionCliente01
        component:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Componente de la aplicación o transacción.
            <br>
            <sup><i>(EN)</i></sup> Application component or transaction.
          example: TX067050
        backend:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Código backend.
            <br>
            <sup><i>(EN)</i></sup> Backend code..
          example: "00045"
    ErrorList:
      properties:
        code:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Código de catálogo de errores.
            <br>
            <sup><i>(EN)</i></sup> Error catalog code.
          example: "001"
        message:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Mensaje de error técnico.
            <br>
            <sup><i>(EN)</i></sup> Technical error message..
          example: Bad Request
        businessMessage:
          type: string
          description: |-
            <sup><i>(ES)</i></sup> Mensaje de negocio.
            <br>
            <sup><i>(EN)</i></sup> Business message.
          example: The xyz field is mandatory
  responses:
    BadRequest:
      description: |-
        <b>`Bad Request`</b><br><br>
        The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    Unauthorized:
      description: |-
        <b>`Unauthorized`</b><br><br>
        The request requires user authentication.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    Forbidden:
      description: |-
        <b>`Forbidden`</b><br><br>
        The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    NotFound:
      description: |-
        <b>`Not Found`</b><br><br>
        The server has not found anything matching the Request-URI.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    Conflict:
      description: |-
        <b>`Conflict`</b><br><br>
        The request could not be completed due to a conflict with the current state of the resource.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    TooManyRequests:
      description: |-
        <b>`Too Many Requests`</b><br><br>
        Indicates that the user has sent too many requests in a given amount of time ("rate limiting").
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    InternalServerError:
      description: |-
        <b>`Internal Server Error`</b><br><br>
        The server encountered an unexpected condition which prevented it from fulfilling the request.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    GatewayTimeout:
      description: |-
        <b>`Gateway Timeout`</b><br><br>
        The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server.
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ErrorModel'