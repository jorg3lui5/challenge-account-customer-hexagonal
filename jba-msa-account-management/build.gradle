import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:7.4.0"
        classpath "org.postgresql:postgresql:42.6.0"
    }
}


plugins {
    id "org.springframework.boot" version "3.2.8"
    id "io.spring.dependency-management" version "1.1.6"
    id "jacoco"
    id "info.solidsoft.pitest" version "1.9.0"
}

def packageName = 'com.test.account.management'
def dirName = 'com/test/account/management'

springBoot {
    mainClass = "${packageName}.AccountManagementMainApplication"
}

apply plugin: "java"
apply plugin: "org.openapi.generator"

group = "${packageName}"
version = '1.0.1'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext["log4j2.version"] = "2.21.1"
ext["jackson.version"] = "2.16.0"

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = "1.5.3.Final"
    lombokVersion = "1.18.28"
}


dependencies {
    compileOnly group: "org.projectlombok", name: "lombok", version: "${lombokVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //dependency Base
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.3'

    implementation 'com.ibm.icu:icu4j:74.2'

    //dependencies for default
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-ui', version: '1.7.0'

    //dependencies EventHub-kafka
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.16.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka:4.1.3'

    // redis dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'io.lettuce:lettuce-core'

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation 'com.google.guava:guava:33.2.1-jre'

    //security
    implementation 'org.xerial.snappy:snappy-java:1.1.10.5'
    implementation 'org.yaml:snakeyaml:2.0'

    // JDBC Reactive
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //sql-server
    implementation 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'javax.persistence:javax.persistence-api:2.2'

    //pitest
    testImplementation "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.0"
    testImplementation "org.pitest:pitest-junit5-plugin:1.2.0"

    //test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0"
    testImplementation 'com.squareup.okhttp3:okhttp:4.10.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //mutation test
    testImplementation "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.0"
    testImplementation "org.pitest:pitest-junit5-plugin:1.2.0"

}
configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-json"
    exclude group: "org.springframework.boot", module: "spring-boot-starter-aop"
    exclude group: "org.bouncycastle", module: "bcpkix-jdk15on"
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    exclude group: "org.bouncycastle", module: "bcpkix-jdk18on"
    exclude group: "org.bouncycastle", module: "bcprov-jdk18on"
    exclude group: "commons-fileupload", module: "commons-fileupload"
    exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket"
    exclude group: "com.google.guava", module: "guava"
    exclude group: "com.graphql-java-kickstart", module: "graphql-kickstart-spring-webflux"
    exclude group: "org.javassist", module: "javassist"
    exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-jdk8"
    exclude group: 'org.codehaus.groovy', module: 'groovy'
}

tasks.register('buildSpringServer', GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${packageName}.infrastructure.input.adapter.rest.bs"
    modelPackage = "${packageName}.infrastructure.input.adapter.rest.bs.bean"
    library = "spring-boot"
    configOptions = [
            skipDefaultInterface                    : "false",
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            reactive                                : "true",
            apiFirst                                : "false",
            delegatePattern                         : "false",
            configPackage                           : "${packageName}.infrastructure.input.adapter.rest.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "com.test.account.management",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}
tasks.register('buildClientJbaCustomerManagement', GenerateTask) {
    inputSpec = "$rootDir/src/main/resources/openapi-client-jba-msa-customer-management.yaml".toString()
    generatorName = "java"
    templateDir = "$rootDir/src/main/resources/openapi-templates/client"
    apiPackage = "${packageName}.infrastructure.output.adapter.rest.jbacustomermanagement.client"
    modelPackage = "${packageName}.infrastructure.output.adapter.rest.jbacustomermanagement.bean"
    outputDir = "$buildDir/generated".toString()
    library = "webclient"
    configOptions = [
            useSpringBoot3          : "true",
            useJakartaEe            : "true",
            openApiNullable         : "false",
            sourceFolder            : "src/main/java",
            configPackage           : "${packageName}.infrastructure.output.adapter.config"
    ]
}

tasks.register("createUnitTest", JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.test.core.ProcessMain'
}

compileJava {
    dependsOn buildSpringServer, buildClientJbaCustomerManagement
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "${dirName}/*OpenAPI2SpringBoot*",
                    "${dirName}/*RFC3339DateFormat*",
                    "${dirName}/data/*",
                    "${dirName}/server/*",
                    "${dirName}/configuration/*",
                    "${dirName}/config/*",
                    "${dirName}/client/*",
                    "${dirName}/repository/*",
                    "${dirName}/server/models/*",
                    "${dirName}/model/*",
                    "${dirName}/mapper/*",
                    "${dirName}/infrastructure/input/adapter/rest/mapper/*Impl.class",
                    "${dirName}/infrastructure/input/adapter/rest/bs/**/*.class",
                    "${dirName}/infrastructure/output/adapter/mapper/*Impl.class",
                    "${dirName}/infrastructure/output/adapter/rest/**/*.class",
                    "${dirName}/infrastructure/input/adapter/rest/account/management/**/*.class",
                    "${dirName}/infrastructure/output/repository/mapper/*Impl.class"
            ])
        }))
    }
    reports {
        xml.required = true
        xml.destination file("$buildDir/jacoco/test.xml")
        html.destination file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}

pitest {
    targetClasses = [
            'com.test.account.management.application.*',
            'com.test.account.management.infrastructure.*'

    ]
    excludedClasses = [
            "com.test.account.management.domain.*"
    ]
    pitestVersion = "1.9.0"
    threads = 4
    outputFormats = ["XML", "HTML"]
    timestampedReports = false
    useClasspathFile = true
}